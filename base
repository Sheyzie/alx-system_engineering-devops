[4mbc[24m(1)                       General Commands Manual                      [4mbc[24m(1)

[1mNAME[0m
       bc - An arbitrary precision calculator language

[1mSYNTAX[0m
       [1mbc [22m[ [1m-hlwsqv [22m] [long-options] [  [4mfile[24m [4m...[24m ]

[1mDESCRIPTION[0m
       [1mbc  [22mis a language that supports arbitrary precision numbers with inter‚Äê
       active execution of statements.  There are  some  similarities  in  the
       syntax  to  the  C  programming  language.   A standard math library is
       available by command line option.  If requested, the  math  library  is
       defined before processing any files.  [1mbc [22mstarts by processing code from
       all  the  files  listed on the command line in the order listed.  After
       all files have been processed, [1mbc [22mreads from the standard  input.   All
       code  is executed as it is read.  (If a file contains a command to halt
       the processor, [1mbc [22mwill never read from the standard input.)

       This version of [1mbc [22mcontains several extensions  beyond  traditional  [1mbc[0m
       implementations and the POSIX draft standard.  Command line options can
       cause these extensions to print a warning or to be rejected.  This doc‚Äê
       ument  describes  the  language accepted by this processor.  Extensions
       will be identified as such.

   [1mOPTIONS[0m
       -h, --help
              Print the usage and exit.

       -i, --interactive
              Force interactive mode.

       -l, --mathlib
              Define the standard math library.

       -w, --warn
              Give warnings for extensions to POSIX [1mbc[22m.

       -s, --standard
              Process exactly the POSIX [1mbc [22mlanguage.

       -q, --quiet
              Do not print the normal GNU bc welcome.

       -v, --version
              Print the version number and copyright and quit.

   [1mNUMBERS[0m
       The most basic element in [1mbc [22mis the number.  Numbers are arbitrary pre‚Äê
       cision numbers.  This precision is both in the  integer  part  and  the
       fractional part.  All numbers are represented internally in decimal and
       all  computation  is  done in decimal.  (This version truncates results
       from divide and multiply operations.)  There are two attributes of num‚Äê
       bers, the length and the scale.  The length is the total number of dec‚Äê
       imal digits used by [1mbc [22mto represent a number and the scale is the total
       number of decimal digits after the decimal point.  For example:
               .000001 has a length of 6 and scale of 6.
               1935.000 has a length of 7 and a scale of 3.

   [1mVARIABLES[0m
       Numbers are stored in two types of variables, simple variables and  ar‚Äê
       rays.   Both simple variables and array variables are named.  Names be‚Äê
       gin with a letter followed by any number of letters, digits and  under‚Äê
       scores.  All letters must be lower case.  (Full alpha-numeric names are
       an  extension.   In POSIX [1mbc [22mall names are a single lower case letter.)
       The type of variable is clear by the context because all array variable
       names will be followed by brackets ([]).

       There are four special variables, [1mscale, ibase, obase, [22mand [1mlast[22m.  [1mscale[0m
       defines how some operations use digits after the  decimal  point.   The
       default  value  of  [1mscale  [22mis 0.  [1mibase [22mand [1mobase [22mdefine the conversion
       base for input and output numbers.  The default for both input and out‚Äê
       put is base 10.  [1mlast [22m(an extension) is a variable that has  the  value
       of  the last printed number.  These will be discussed in further detail
       where appropriate.  All of these variables may have values assigned  to
       them as well as used in expressions.

   [1mCOMMENTS[0m
       Comments in [1mbc [22mstart with the characters [1m/* [22mand end with the characters
       [1m*/[22m.   Comments  may  start anywhere and appear as a single space in the
       input.  (This causes comments to delimit other input items.  For  exam‚Äê
       ple,  a  comment  can  not  be found in the middle of a variable name.)
       Comments include any newlines (end of line) between the start  and  the
       end of the comment.

       To  support  the  use of scripts for [1mbc[22m, a single line comment has been
       added as an extension.  A single line comment starts at a  [1m#  [22mcharacter
       and  continues  to the next end of the line.  The end of line character
       is not part of the comment and is processed normally.

   [1mEXPRESSIONS[0m
       The numbers are manipulated by expressions and statements.   Since  the
       language was designed to be interactive, statements and expressions are
       executed  as  soon  as possible.  There is no "main" program.  Instead,
       code is executed as it is encountered.  (Functions, discussed in detail
       later, are defined when encountered.)

       A simple expression is just a constant. [1mbc [22mconverts constants into  in‚Äê
       ternal  decimal  numbers using the current input base, specified by the
       variable [1mibase[22m. (There is an exception in functions.)  The legal values
       of [1mibase [22mare 2 through 36. (Bases greater than 16  are  an  extension.)
       Assigning a value outside this range to [1mibase [22mwill result in a value of
       2  or 36.  Input numbers may contain the characters 0‚Äì9 and A‚ÄìZ. (Note:
       They must be capitals.  Lower case letters are variable names.)  Single
       digit numbers always have the value of  the  digit  regardless  of  the
       value of [1mibase[22m. (i.e. A = 10.)  For multi-digit numbers, [1mbc [22mchanges all
       input  digits  greater or equal to ibase to the value of [1mibase[22m-1.  This
       makes the number [1mZZZ [22malways be the largest 3 digit number of the  input
       base.

       Full expressions are similar to many other high level languages.  Since
       there  is only one kind of number, there are no rules for mixing types.
       Instead, there are rules on the scale of expressions.  Every expression
       has a scale.  This is derived from the scale of original  numbers,  the
       operation performed and in many cases, the value of the variable [1mscale[22m.
       Legal  values  of the variable [1mscale [22mare 0 to the maximum number repre‚Äê
       sentable by a C integer.

       In the following descriptions of legal expressions, "expr" refers to  a
       complete  expression and "var" refers to a simple or an array variable.
       A simple variable is just a
              [4mname[0m
       and an array variable is specified as
              [4mname[24m[[4mexpr[24m]
       Unless specifically mentioned the scale of the result  is  the  maximum
       scale of the expressions involved.

       - expr The result is the negation of the expression.

       ++ var The  variable is incremented by one and the new value is the re‚Äê
              sult of the expression.

       -- var The variable is decremented by one and the new value is the  re‚Äê
              sult of the expression.

       var ++
               The  result  of the expression is the value of the variable and
              then the variable is incremented by one.

       var -- The result of the expression is the value of  the  variable  and
              then the variable is decremented by one.

       expr + expr
              The result of the expression is the sum of the two expressions.

       expr - expr
              The  result  of  the expression is the difference of the two ex‚Äê
              pressions.

       expr * expr
              The result of the expression is the product of the  two  expres‚Äê
              sions.

       expr / expr
              The  result of the expression is the quotient of the two expres‚Äê
              sions.  The scale of the result is the  value  of  the  variable
              [1mscale[22m.

       expr % expr
              The  result  of the expression is the "remainder" and it is com‚Äê
              puted in the following way.  To compute a%b, first a/b  is  com‚Äê
              puted to [1mscale [22mdigits.  That result is used to compute a-(a/b)*b
              to  the scale of the maximum of [1mscale[22m+scale(b) and scale(a).  If
              [1mscale [22mis set to zero and both expressions are integers this  ex‚Äê
              pression is the integer remainder function.

       expr ^ expr
              The result of the expression is the value of the first raised to
              the  second.  The second expression must be an integer.  (If the
              second expression is not an integer, a warning is generated  and
              the expression is truncated to get an integer value.)  The scale
              of  the result is [1mscale [22mif the exponent is negative.  If the ex‚Äê
              ponent is positive the scale of the result is the minimum of the
              scale of the first expression times the value  of  the  exponent
              and  the maximum of [1mscale [22mand the scale of the first expression.
              (e.g. scale(a^b) = min(scale(a)*b, max( [1mscale, [22mscale(a))).)   It
              should be noted that expr^0 will always return the value of 1.

       ( expr )
              This  alters  the standard precedence to force the evaluation of
              the expression.

       var = expr
              The variable is assigned the value of the expression.

       var <op>= expr
              This is equivalent to "var = var <op> expr" with  the  exception
              that  the  "var"  part  is evaluated only once.  This can make a
              difference if "var" is an array.

       Relational expressions are a special kind  of  expression  that  always
       evaluate to 0 or 1, 0 if the relation is false and 1 if the relation is
       true.   These  may  appear in any legal expression.  (POSIX bc requires
       that relational expressions are used only in if, while, and for  state‚Äê
       ments  and that only one relational test may be done in them.)  The re‚Äê
       lational operators are

       expr1 < expr2
              The result is 1 if expr1 is strictly less than expr2.

       expr1 <= expr2
              The result is 1 if expr1 is less than or equal to expr2.

       expr1 > expr2
              The result is 1 if expr1 is strictly greater than expr2.

       expr1 >= expr2
              The result is 1 if expr1 is greater than or equal to expr2.

       expr1 == expr2
              The result is 1 if expr1 is equal to expr2.

       expr1 != expr2
              The result is 1 if expr1 is not equal to expr2.

       Boolean operations are also legal.  (POSIX [1mbc [22mdoes NOT have boolean op‚Äê
       erations).  The result of all boolean operations are 0 and 1 (for false
       and true) as in relational expressions.  The boolean operators are:

       !expr  The result is 1 if expr is 0.

       expr && expr
              The result is 1 if both expressions are non-zero.

       expr || expr
              The result is 1 if either expression is non-zero.

       The expression precedence is as follows: (lowest to highest)
              || operator, left associative
              && operator, left associative
              ! operator, nonassociative
              Relational operators, left associative
              Assignment operator, right associative
              + and - operators, left associative
              *, / and % operators, left associative
              ^ operator, right associative
              unary - operator, nonassociative
              ++ and -- operators, nonassociative

       This precedence was chosen so that POSIX compliant [1mbc [22mprograms will run
       correctly.  This will cause the use of the relational and logical oper‚Äê
       ators to have some unusual behavior when used with  assignment  expres‚Äê
       sions.  Consider the expression:
              a = 3 < 5

       Most C programmers would assume this would assign the result of "3 < 5"
       (the  value 1) to the variable "a".  What this does in [1mbc [22mis assign the
       value 3 to the variable "a" and then compare 3 to 5.  It is best to use
       parenthesis when using relational and logical operators  with  the  as‚Äê
       signment operators.

       There  are  a  few  more  special  expressions that are provided in [1mbc[22m.
       These have to do with user defined functions  and  standard  functions.
       They  all  appear  as "[4mname[24m[1m([4m[22mparameters[24m[1m)[22m".  See the section on functions
       for user defined functions.  The standard functions are:

       length ( expression )
              The value of the length function is the  number  of  significant
              digits in the expression.

       read ( )
              The  read  function  (an  extension) will read a number from the
              standard input, regardless of where the function  occurs.    Be‚Äê
              ware,  this  can cause problems with the mixing of data and pro‚Äê
              gram in the standard input.  The best use for this  function  is
              in  a previously written program that needs input from the user,
              but never allows program code to be input from  the  user.   The
              value  of the read function is the number read from the standard
              input using the current value of the variable [1mibase [22mfor the con‚Äê
              version base.

       scale ( expression )
              The value of the scale function is the number  of  digits  after
              the decimal point in the expression.

       sqrt ( expression )
              The value of the sqrt function is the square root of the expres‚Äê
              sion.  If the expression is negative, a run time error is gener‚Äê
              ated.

   [1mSTATEMENTS[0m
       Statements  (as  in most algebraic languages) provide the sequencing of
       expression evaluation.  In [1mbc [22mstatements are executed "as soon as  pos‚Äê
       sible."   Execution  happens when a newline in encountered and there is
       one or more complete statements.  Due to this immediate execution, new‚Äê
       lines are very important in [1mbc[22m.  In fact, both a semicolon and  a  new‚Äê
       line  are  used  as statement separators.  An improperly placed newline
       will cause a syntax error.  Because newlines are statement  separators,
       it is possible to hide a newline by using the backslash character.  The
       sequence "\<nl>", where <nl> is the newline appears to [1mbc [22mas whitespace
       instead of a newline.  A statement list is a series of statements sepa‚Äê
       rated by semicolons and newlines.  The following is a list of [1mbc [22mstate‚Äê
       ments  and what they do: (Things enclosed in brackets ([]) are optional
       parts of the statement.)

       expression
              This statement does one of two things.  If the expression starts
              with "<variable> <assignment> ...", it is considered  to  be  an
              assignment  statement.   If  the expression is not an assignment
              statement, the expression is evaluated and printed to  the  out‚Äê
              put.   After  the  number is printed, a newline is printed.  For
              example, "a=1" is an assignment statement and "(a=1)" is an  ex‚Äê
              pression  that has an embedded assignment.  All numbers that are
              printed are printed in the base specified by the variable [1mobase[22m.
              The legal values for [1mobase [22mare 2 through BC_BASE_MAX.  (See  the
              section  LIMITS.)   For  bases 2 through 16, the usual method of
              writing numbers is used.  For bases greater than 16, [1mbc  [22muses  a
              multi-character  digit method of printing the numbers where each
              higher base digit is printed as a base 10  number.   The  multi-
              character  digits  are separated by spaces.  Each digit contains
              the number of characters required  to  represent  the  base  ten
              value  of  "obase-1".  Since numbers are of arbitrary precision,
              some numbers may not be  printable  on  a  single  output  line.
              These  long  numbers will be split across lines using the "\" as
              the last character on a line.  The maximum number of  characters
              printed  per  line  is 70.  Due to the interactive nature of [1mbc[22m,
              printing a number  causes  the  side  effect  of  assigning  the
              printed  value  to  the  special variable [1mlast[22m.  This allows the
              user to recover the last value printed without having to  retype
              the  expression  that  printed the number.  Assigning to [1mlast [22mis
              legal and will overwrite the last printed  value  with  the  as‚Äê
              signed  value.   The  newly assigned value will remain until the
              next number is printed or another value  is  assigned  to  [1mlast[22m.
              (Some  installations  may  allow  the use of a single period (.)
              which is not part of a number as a short hand notation  for  for
              [1mlast[22m.)

       string The  string is printed to the output.  Strings start with a dou‚Äê
              ble quote character and contain all characters  until  the  next
              double  quote character.  All characters are take literally, in‚Äê
              cluding any newline.  No newline character is printed after  the
              string.

       [1mprint [22mlist
              The  print  statement  (an extension) provides another method of
              output.  The "list" is a list of strings and  expressions  sepa‚Äê
              rated  by  commas.   Each string or expression is printed in the
              order of the list.  No terminating newline is printed.   Expres‚Äê
              sions  are  evaluated and their value is printed and assigned to
              the variable [1mlast[22m.  Strings in the print statement  are  printed
              to the output and may contain special characters.  Special char‚Äê
              acters  start  with  the  backslash  character (\).  The special
              characters recognized by [1mbc [22mare "a" (alert or bell), "b"  (back‚Äê
              space),  "f"  (form feed), "n" (newline), "r" (carriage return),
              "q" (double quote), "t" (tab), and "\" (backslash).   Any  other
              character following the backslash will be ignored.

       { statement_list }
              This  is  the compound statement.  It allows multiple statements
              to be grouped together for execution.

       [1mif [22m( expression ) statement1 [[1melse [22mstatement2]
              The if statement evaluates the expression  and  executes  state‚Äê
              ment1  or  statement2  depending on the value of the expression.
              If the expression  is  non-zero,  statement1  is  executed.   If
              statement2 is present and the value of the expression is 0, then
              statement2 is executed.  (The else clause is an extension.)

       [1mwhile [22m( expression ) statement
              The while statement will execute the statement while the expres‚Äê
              sion  is non-zero.  It evaluates the expression before each exe‚Äê
              cution of the statement.   Termination of the loop is caused  by
              a zero expression value or the execution of a break statement.

       [1mfor [22m( [expression1] ; [expression2] ; [expression3] ) statement
              The  for statement controls repeated execution of the statement.
              Expression1 is evaluated before the loop.  Expression2 is evalu‚Äê
              ated before each execution of the statement.  If it is non-zero,
              the statement is evaluated.  If it is zero, the loop  is  termi‚Äê
              nated.   After  each  execution of the statement, expression3 is
              evaluated before the reevaluation of  expression2.   If  expres‚Äê
              sion1  or  expression3  are missing, nothing is evaluated at the
              point they would be evaluated.  If expression2 is missing, it is
              the same as substituting the value 1 for expression2.  (The  op‚Äê
              tional  expressions  are  an  extension.   POSIX [1mbc [22mrequires all
              three expressions.)  The following is equivalent  code  for  the
              for statement:
              expression1;
              while (expression2) {
                 statement;
                 expression3;
              }

       [1mbreak  [22mThis statement causes a forced exit of the most recent enclosing
              while statement or for statement.

       [1mcontinue[0m
              The continue statement (an extension) causes the most recent en‚Äê
              closing for statement to start the next iteration.

       [1mhalt   [22mThe  halt statement (an extension) is an executed statement that
              causes the [1mbc [22mprocessor to quit only when it is  executed.   For
              example,  "if  (0 == 1) halt" will not cause [1mbc [22mto terminate be‚Äê
              cause the halt is not executed.

       [1mreturn [22mReturn the value 0 from a function.  (See the section  on  func‚Äê
              tions.)

       [1mreturn [22m( expression )
              Return  the  value  of the expression from a function.  (See the
              section on functions.)  As an extension, the parenthesis are not
              required.

   [1mPSEUDO STATEMENTS[0m
       These statements are not statements in the traditional sense.  They are
       not executed statements.  Their  function  is  performed  at  "compile"
       time.

       [1mlimits [22mPrint  the  local  limits  enforced  by the local version of [1mbc[22m.
              This is an extension.

       [1mquit   [22mWhen the quit statement is read, the [1mbc [22mprocessor is terminated,
              regardless of where the quit statement is found.   For  example,
              "if (0 == 1) quit" will cause [1mbc [22mto terminate.

       [1mwarranty[0m
              Print a longer warranty notice.  This is an extension.

   [1mFUNCTIONS[0m
       Functions  provide  a method of defining a computation that can be exe‚Äê
       cuted later.  Functions in [1mbc [22malways compute a value and return  it  to
       the  caller.   Function  definitions  are "dynamic" in the sense that a
       function is undefined until a definition is encountered in  the  input.
       That  definition is then used until another definition function for the
       same name is encountered.  The new definition then replaces  the  older
       definition.  A function is defined as follows:
              [1mdefine [4m[22mname[24m [1m( [4m[22mparameters[24m [1m) { [4m[22mnewline[0m
                  [4mauto_list[24m   [4mstatement_list[24m [1m}[0m
       A function call is just an expression of the form "[4mname[24m[1m([4m[22mparameters[24m[1m)[22m".

       Parameters are numbers or arrays (an extension).  In the function defi‚Äê
       nition, zero or more parameters are defined by listing their names sep‚Äê
       arated by commas.  All parameters are call by value parameters.  Arrays
       are  specified  in  the  parameter definition by the notation "[4mname[24m[1m[][22m".
       In the function call, actual parameters are full expressions for number
       parameters.  The same notation is used for passing arrays as for defin‚Äê
       ing array parameters.  The named array is passed by value to the  func‚Äê
       tion.   Since  function  definitions are dynamic, parameter numbers and
       types are checked when a function is called.  Any mismatch in number or
       types of parameters will cause a runtime error.  A runtime  error  will
       also occur for the call to an undefined function.

       The  [4mauto_list[24m  is  an  optional list of variables that are for "local"
       use.  The syntax of the auto list (if present) is "[1mauto [4m[22mname[24m,  ...  ;".
       (The  semicolon  is  optional.)  Each [4mname[24m is the name of an auto vari‚Äê
       able.  Arrays may be specified by using the same notation  as  used  in
       parameters.   These  variables have their values pushed onto a stack at
       the start of the function.  The variables are then initialized to  zero
       and  used  throughout the execution of the function.  At function exit,
       these variables are popped so that the original value (at the  time  of
       the function call) of these variables are restored.  The parameters are
       really  auto  variables that are initialized to a value provided in the
       function call.  Auto variables are  different  than  traditional  local
       variables because if function A calls function B, B may access function
       A's  auto  variables by just using the same name, unless function B has
       called them auto variables.  Due to the fact that  auto  variables  and
       parameters are pushed onto a stack, [1mbc [22msupports recursive functions.

       The  function  body  is a list of [1mbc [22mstatements.  Again, statements are
       separated by semicolons or newlines.  Return statements cause the  ter‚Äê
       mination  of  a function and the return of a value.  There are two ver‚Äê
       sions of the return statement.  The first form, "[1mreturn[22m",  returns  the
       value  0 to the calling expression.  The second form, "[1mreturn ( [4m[22mexpres‚Äê[0m
       [4msion[24m [1m)[22m", computes the value of the expression and returns that value to
       the calling expression.  There is an implied "[1mreturn (0)[22m" at the end of
       every function.  This allows a function to terminate and return 0 with‚Äê
       out an explicit return statement.

       Functions also change the usage of the variable [1mibase[22m.   All  constants
       in  the function body will be converted using the value of [1mibase [22mat the
       time of the function call.  Changes of [1mibase [22mwill be ignored during the
       execution of the function except for the standard function [1mread[22m,  which
       will always use the current value of [1mibase [22mfor conversion of numbers.

       Several  extensions have been added to functions.  First, the format of
       the definition has been slightly relaxed.  The  standard  requires  the
       opening  brace  be on the same line as the [1mdefine [22mkeyword and all other
       parts must be on following lines.  This version of [1mbc  [22mwill  allow  any
       number  of newlines before and after the opening brace of the function.
       For example, the following definitions are legal.
              define d (n) { return (2*n); }
              define d (n)
                { return (2*n); }

       Functions may be defined as [1mvoid[22m.  A void function returns no value and
       thus may not be used in any place that needs a value.  A void  function
       does  not  produce  any  output when called by itself on an input line.
       The key word [1mvoid [22mis placed between the key word [1mdefine [22mand  the  func‚Äê
       tion name.  For example, consider the following session.
              define py (y) { print "--->", y, "<---", "\n"; }
              define void px (x) { print "--->", x, "<---", "\n"; }
              py(1)
              --->1<---
              0
              px(1)
              --->1<---
       Since  [1mpy  [22mis not a void function, the call of [1mpy(1) [22mprints the desired
       output and then prints a second line that is the value of the function.
       Since the value of a function that is  not  given  an  explicit  return
       statement  is zero, the zero is printed.  For [1mpx(1)[22m, no zero is printed
       because the function is a void function.

       Also, call by variable for arrays was added.   To  declare  a  call  by
       variable  array, the declaration of the array parameter in the function
       definition looks like "[4m*name[24m[1m[][22m".  The call to the function remains  the
       same as call by value arrays.

   [1mMATH LIBRARY[0m
       If  [1mbc  [22mis  invoked with the [1m-l [22moption, a math library is preloaded and
       the default scale is set to 20.   The  math  functions  will  calculate
       their results to the scale set at the time of their call.  The math li‚Äê
       brary defines the following functions:

       s ([4mx[24m)  The sine of x, x is in radians.

       c ([4mx[24m)  The cosine of x, x is in radians.

       a ([4mx[24m)  The arctangent of x, arctangent returns radians.

       l ([4mx[24m)  The natural logarithm of x.

       e ([4mx[24m)  The exponential function of raising e to the value x.

       j ([4mn,x[24m)
              The Bessel function of integer order n of x.

   [1mEXAMPLES[0m
       In  /bin/sh,  the  following will assign the value of "pi" to the shell
       variable [1mpi[22m.
               pi=$(echo "scale=10; 4*a(1)" | bc -l)

       The following is the definition of the exponential function used in the
       math library.  This function is written in POSIX [1mbc[22m.
              scale = 20

              /* Uses the fact that e^x = (e^(x/2))^2
                 When x is small enough, we use the series:
                   e^x = 1 + x + x^2/2! + x^3/3! + ...
              */

              define e(x) {
                auto  a, d, e, f, i, m, v, z

                /* Check the sign of x. */
                if (x<0) {
                  m = 1
                  x = -x
                }

                /* Precondition x. */
                z = scale;
                scale = 4 + z + .44*x;
                while (x > 1) {
                  f += 1;
                  x /= 2;
                }

                /* Initialize the variables. */
                v = 1+x
                a = x
                d = 1

                for (i=2; 1; i++) {
                  e = (a *= x) / (d *= i)
                  if (e == 0) {
                    if (f>0) while (f--)  v = v*v;
                    scale = z
                    if (m) return (1/v);
                    return (v/1);
                  }
                  v += e
                }
              }

       The following is code that uses the extended features of [1mbc  [22mto  imple‚Äê
       ment a simple program for calculating checkbook balances.  This program
       is best kept in a file so that it can be used many times without having
       to retype it at every use.
              scale=2
              print "\nCheck book program!\n"
              print "  Remember, deposits are negative transactions.\n"
              print "  Exit by a 0 transaction.\n\n"

              print "Initial balance? "; bal = read()
              bal /= 1
              print "\n"
              while (1) {
                "current balance = "; bal
                "transaction? "; trans = read()
                if (trans == 0) break;
                bal -= trans
                bal /= 1
              }
              quit

       The following is the definition of the recursive factorial function.
              define f (x) {
                if (x <= 1) return (1);
                return (f(x-1) * x);
              }

   [1mREADLINE AND LIBEDIT OPTIONS[0m
       GNU [1mbc [22mcan be compiled (via a configure option) to use the GNU [1mreadline[0m
       input  editor library or the BSD [1mlibedit [22mlibrary.  This allows the user
       to do editing of lines before sending them to [1mbc[22m.  It also allows for a
       history of previous lines typed.  When this option is selected, [1mbc  [22mhas
       one  more special variable.  This special variable, [1mhistory [22mis the num‚Äê
       ber of lines of history retained.  For [1mreadline[22m, a value  of  -1  means
       that  an  unlimited  number of history lines are retained.  Setting the
       value of [1mhistory [22mto a positive number restricts the number  of  history
       lines  to  the  number given.  The value of 0 disables the history fea‚Äê
       ture.  The default value is 100.  For more information, read  the  user
       manuals  for  the GNU [1mreadline[22m, [1mhistory [22mand BSD [1mlibedit [22mlibraries.  One
       can not enable both [1mreadline [22mand [1mlibedit [22mat the same time.

   [1mDIFFERENCES[0m
       This version of [1mbc [22mwas implemented from the POSIX P1003.2/D11 draft and
       contains several differences and extensions relative to the  draft  and
       traditional  implementations.  It is not implemented in the traditional
       way using [4mdc(1).[24m  This version is a single  process  which  parses  and
       runs  a  byte  code  translation  of the program.  There is an "undocu‚Äê
       mented" option (-c) that causes the program to output the byte code  to
       the  standard output instead of running it.  It was mainly used for de‚Äê
       bugging the parser and preparing the math library.

       A major source of differences is extensions, where  a  feature  is  ex‚Äê
       tended  to add more functionality and additions, where new features are
       added.  The following is the list of differences and extensions.

       LANG environment
              This version does not conform to the POSIX standard in the  pro‚Äê
              cessing  of  the  LANG  environment variable and all environment
              variables starting with LC_.

       names  Traditional and POSIX [1mbc [22mhave single letter names for functions,
              variables and arrays.  They have been extended to be multi-char‚Äê
              acter names that start with a letter and  may  contain  letters,
              numbers and the underscore character.

       Strings
              Strings  are  not allowed to contain NUL characters.  POSIX says
              all characters must be included in strings.

       last   POSIX [1mbc [22mdoes not have a [1mlast [22mvariable.  Some implementations of
              [1mbc [22muse the period (.) in a similar way.

       comparisons
              POSIX [1mbc [22mallows comparisons only in the if statement, the  while
              statement,  and  the  second  expression  of  the for statement.
              Also, only one relational operation is allowed in each of  those
              statements.

       if statement, else clause
              POSIX [1mbc [22mdoes not have an else clause.

       for statement
              POSIX  [1mbc  [22mrequires  all  expressions  to  be present in the for
              statement.

       &&, ||, !
              POSIX [1mbc [22mdoes not have the logical operators.

       read function
              POSIX [1mbc [22mdoes not have a read function.

       print statement
              POSIX [1mbc [22mdoes not have a print statement.

       continue statement
              POSIX [1mbc [22mdoes not have a continue statement.

       return statement
              POSIX [1mbc [22mrequires parentheses around the return expression.

       array parameters
              POSIX [1mbc [22mdoes not (currently) support array parameters in  full.
              The POSIX grammar allows for arrays in function definitions, but
              does not provide a method to specify an array as an actual para‚Äê
              meter.  (This is most likely an oversight in the grammar.)  Tra‚Äê
              ditional implementations of [1mbc [22mhave only call by value array pa‚Äê
              rameters.

       function format
              POSIX  [1mbc [22mrequires the opening brace on the same line as the [1mde‚Äê[0m
              [1mfine [22mkey word and the [1mauto [22mstatement on the next line.

       =+, =-, =*, =/, =%, =^
              POSIX [1mbc [22mdoes not require these "old style" assignment operators
              to be defined.  This version may allow these "old style" assign‚Äê
              ments.  Use the limits statement to see if the installed version
              supports them.  If it does support the  "old  style"  assignment
              operators,  the statement "a =- 1" will decrement [1ma [22mby 1 instead
              of setting [1ma [22mto the value -1.

       spaces in numbers
              Other implementations of [1mbc [22mallow spaces in numbers.  For  exam‚Äê
              ple,  "x=1  3" would assign the value 13 to the variable x.  The
              same statement would cause a syntax error in this version of [1mbc[22m.

       errors and execution
              This implementation varies from other implementations  in  terms
              of  what  code will be executed when syntax and other errors are
              found in the program.  If a syntax error is found in a  function
              definition,  error  recovery  tries  to  find the beginning of a
              statement and continue to parse the function.  Once a syntax er‚Äê
              ror is found in the function, the function will not be  callable
              and  becomes undefined.  Syntax errors in the interactive execu‚Äê
              tion code will invalidate the current execution block.  The exe‚Äê
              cution block is terminated by an end of line that appears  after
              a complete sequence of statements.  For example,
              a = 1
              b = 2
       has two execution blocks and
              { a = 1
                b = 2 }
       has  one  execution block.  Any runtime error will terminate the execu‚Äê
       tion of the current execution block.  A runtime warning will not termi‚Äê
       nate the current execution block.

       Interrupts
              During an interactive session, the SIGINT signal (usually gener‚Äê
              ated by the control-C character from the  terminal)  will  cause
              execution  of the current execution block to be interrupted.  It
              will display a "runtime" error indicating which function was in‚Äê
              terrupted.  After all runtime structures have been cleaned up, a
              message will be printed to notify the user that [1mbc [22mis ready  for
              more input.  All previously defined functions remain defined and
              the  value  of all non-auto variables are the value at the point
              of interruption.  All auto variables and function parameters are
              removed during the clean up process.  During  a  non-interactive
              session, the SIGINT signal will terminate the entire run of [1mbc[22m.

   [1mLIMITS[0m
       The  following are the limits currently in place for this [1mbc [22mprocessor.
       Some of them may have been changed by an installation.  Use the  limits
       statement to see the actual values.

       BC_BASE_MAX
              The  maximum  output  base is currently set at 999.  The maximum
              input base is 16.

       BC_DIM_MAX
              This is currently an arbitrary limit of  65535  as  distributed.
              Your installation may be different.

       BC_SCALE_MAX
              The  number  of  digits  after  the  decimal point is limited to
              INT_MAX digits.  Also, the number of digits before  the  decimal
              point is limited to INT_MAX digits.

       BC_STRING_MAX
              The  limit  on  the  number of characters in a string is INT_MAX
              characters.

       exponent
              The value of the exponent in the raise operation (^) is  limited
              to LONG_MAX.

       variable names
              The  current  limit  on  the number of unique names is 32767 for
              each of simple variables, arrays and functions.

[1mENVIRONMENT VARIABLES[0m
       The following environment variables are processed by [1mbc[22m:

       POSIXLY_CORRECT
              This is the same as the [1m-s [22moption.

       BC_ENV_ARGS
              This is another mechanism to get arguments to [1mbc[22m.  The format is
              the same as the command line  arguments.   These  arguments  are
              processed  first,  so  any files listed in the environment argu‚Äê
              ments are processed before  any  command  line  argument  files.
              This  allows  the user to set up "standard" options and files to
              be processed at every invocation of [1mbc[22m.  The files in the  envi‚Äê
              ronment  variables  would typically contain function definitions
              for functions the user wants defined every time [1mbc [22mis run.

       BC_LINE_LENGTH
              This should be an integer specifying the number of characters in
              an output line for numbers.  This  includes  the  backslash  and
              newline characters for long numbers.  As an extension, the value
              of  zero  disables  the  multi-line feature.  Any other value of
              this variable that is less than 3 sets the line length to 70.

[1mDIAGNOSTICS[0m
       If any file on the command line can not be opened, [1mbc [22mwill report  that
       the file is unavailable and terminate.  Also, there are compile and run
       time diagnostics that should be self-explanatory.

[1mBUGS[0m
       Error recovery is not very good yet.

       Email  bug  reports  to  [1mbug-bc@gnu.org[22m.   Be  sure to include the word
       ``bc'' somewhere in the ``Subject:'' field.

[1mAUTHOR[0m
       Philip A. Nelson
       philnelson@acm.org

[1mACKNOWLEDGEMENTS[0m
       The author would like to thank  Steve  Sommars  (Steve.Sommars@att.com)
       for  his extensive help in testing the implementation.  Many great sug‚Äê
       gestions were given.  This is a much better product due to his involve‚Äê
       ment.

GNU Project                       2006-06-11                             [4mbc[24m(1)
